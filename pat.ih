#ifndef _lib_pat_ih_
#define _lib_pat_ih_
#include <stdint.h>
#include <pat.h>

enum type {
	type_nil,
	type_alt,
	type_cat,
	type_cls,
	type_lit,
	type_opt,
	type_rep,
	type_kln,
	type_sub,
	type_reg,
	type_nop,
};

struct context;
struct ins;
struct thread;
struct token;
union arg;

struct thread {
	struct thread   *next;
	struct ins      *ip;
	size_t           nmat;
	struct patmatch  mat[10];
};

struct token {
	struct token *up;
	uint16_t      len;
	uint16_t      siz;
	uint8_t       ch;
	uint8_t       id;
};

union arg {
	ptrdiff_t f;
	char      b;
	size_t    z;
};

struct ins {
        int      (*op)(struct context *, char const);
	union arg arg;
};

/* pat-exec.c */
int pat_match(struct pattern *, int (*)(char *, void *), void *);

int do_char(struct context *, char const);
int do_clss(struct context *, char const);
int do_fork(struct context *, char const);
int do_halt(struct context *, char const);
int do_jump(struct context *, char const);
int do_mark(struct context *, char const);
int do_save(struct context *, char const);

/* pat-thr.c */
int  thr_alloc(struct thread *[static 2]);
int  thr_cmp(  struct thread *, struct thread *);
int  thr_init( struct thread *, struct ins *);
void thr_fork( struct thread *, struct thread *);
void thr_free( struct thread *);
void thr_mv(   struct thread *[static 2], struct thread **);

/* pat-comp.c */
int pat_marshal(struct pattern *, struct token *);
size_t type_len(enum type);

/* pat_parse.c */
int pat_parse(struct token **, char const *);
void tok_free(struct token *);

#endif
