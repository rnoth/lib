#ifndef _lib_pat_ih_
#define _lib_pat_ih_
#include <stdint.h>
#include <pat.h>

enum op {
	op_null,
	op_jump,
	op_fork,
	op_char,
	op_clss,
	op_mark,
	op_save,
	op_halt,
	nop,
};

enum type {
	type_nil,
	type_alt,
	type_cat,
	type_cls,
	type_lit,
	type_opt,
	type_rep,
	type_kln,
	type_sub,
	type_reg,
	type_nop,
};

struct context;
struct ins;
struct thread;
struct token;
union arg;

struct context {
	int          (*cb)(char *, void *);
	void          *cbx;
	size_t         pos;
	struct thread *thr;
	struct thread *que[2];
	struct thread *res;
	struct thread *frl[2];
};

struct thread {
	struct thread   *next;
	struct ins      *ip;
	struct patmatch *mat;
};

struct token {
	struct token *up;
	uint16_t      len;
	uint16_t      siz;
	uint8_t       ch;
	uint8_t       id;
};

union arg {
	ptrdiff_t f;
	char      b;
	size_t    z;
};

struct ins {
        int      (*op)(struct context *, char const);
	union arg arg;
};

struct pos {
	char   const *v;
	size_t const  n;
	size_t        f;
};

static inline void       step(struct pos *);
static inline bool        eol(struct pos const *);
static inline char const *str(struct pos const *);

/* pat-exec.c */
struct thread *ctx_get(struct context *);
void ctx_fini(struct context *);
int  ctx_init(struct context *, struct pattern *);

int do_char(struct context *, char const);
int do_clss(struct context *, char const);
int do_fork(struct context *, char const);
int do_halt(struct context *, char const);
int do_jump(struct context *, char const);
int do_mark(struct context *, char const);
int do_save(struct context *, char const);

int get_char(char *, void *);

/* pat-thr.c */
int  thr_alloc(struct thread *[static 2]);
int  thr_cmp(  struct thread *, struct thread *);
int  thr_init( struct thread *, struct ins *);
int  thr_fork( struct thread *, struct thread *);
void thr_free( struct thread *);
void thr_mv(   struct thread *[static 2], struct thread **);

/* pat-comp.c */
int pat_marshal(struct pattern *, struct token *);
size_t type_len(enum type);

/* pat_parse.c */
int pat_parse(struct token **, char const *);

/* pat-scan.c */
int pat_scan(struct token **, char const *);
void tok_free(struct token *);

int pat_exec(struct context *);
int pat_match(struct context *, struct pattern *);

void       step(struct pos *p) { ++p->f; }
bool        eol(struct pos const *p) { return p->f >= p->n; }
char const *str(struct pos const *p) { return p->v + p->f; }

#endif
